---
import Layout from '../../layouts/Layout.astro';
import { getPics, picUrl } from '../../pics';
import { Image } from 'astro:assets';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const pics = await getPics();
  return pics.map(entry => ({
  params: { slug: entry.slug }, props: { entry },
  }));
}

// 2. For your template, you can get the entry directly from the prop
const { entry } = Astro.props;

const pics = await getPics();

const nav = [
  ['first', pics[0]],
  ['prev', pics[pics.findIndex(x => x.slug == entry.slug) - 1]],
  ['next', pics[pics.findIndex(x => x.slug == entry.slug) + 1]],
  ['last', pics[pics.length - 1]],
] as const;
---

<Layout title=`ANNAJA-${entry.data.title}`>
  <link slot="head" rel="stylesheet" href="/works.css">
  <div id="nav_stack">
    {nav.map(([title, tgt]) => tgt === undefined || tgt.slug === entry.slug
      ? <div><a class="nav_link disabled" href="#!">{title}</span></div>
      : <div><a class="nav_link" href={picUrl(tgt)}>{title}</a></div>
    )}
  </div>
  <figure id="imageHolder">
    <Image class='img' id="img"
      src={entry.data.image} alt={entry.slug} loading="eager"
      style={{ 'aspect-ratio': `${entry.data.image.width} / ${entry.data.image.height}` }}
    />
  </figure>
  <dl>
    <div class="details details_title">
      <dt>Title:</dt>
      <dd>{entry.data.title}</dd>
    </div>
    <div class="details">
      <dt>Size:</dt>
      <dd>width: {entry.data.width}cm, height: {entry.data.height}cm</dd>
    </div>
    <div class=`details ${entry.data.price ? "" : "missing"}`>
      <dt>price:</dt>
      <dd>{entry.data.price}</dd>
    </div>
  </dl>
</Layout>

<script>
  // acquire elements we operate on
  const main = document.getElementsByTagName("main")[0];
  const imgHolder = document.getElementById("imageHolder");
  const img = document.getElementById('img');
  if (!main || !imgHolder || !img) throw new Error("HTML and JS out of sync");
  // always start at main, scroll position isn't useful in the gallery
  main.scrollIntoView({ behavior: 'instant', block: 'start' });
  // Scroll into view or open on new page
  img.onclick = () => img.scrollIntoView({ behavior: 'instant', block: 'center' });
</script>

<style>
  dl {
    display: grid;
    gap: 2rem;
    padding: 1rem;
    text-align: center;
    margin: 0;
  }

  .details {
    display: grid;
    gap: 0.5em;
  }

  .details.missing {
    visibility: hidden;
  }

  dt {
    color: hsl(0, 0%, 50%);
    font-size: 0.7rem;
  }

  dd {
    margin-left: 0;
  }

  dt, dd {
    display: block;
    text-align: center;
  }

  .details dd {
    font-size: 0.7rem;
    margin-bottom: 0;
  }

  .details_title dd {
    color: hsl(0, 1%, 73%);
    font-size: 1rem;
    text-transform: uppercase;
  }

  .details:not(.details_title) dd {
    color: hsl(0, 1%, 60%);
    font-size: 0.8rem;
  }

  #slidenav {
    display: grid;
    grid-template-columns: auto auto;
    justify-content: space-around;
  }
  @media screen and (max-width: 900px) {
    #nav_stack {
      display: block flex;
      flex-direction: row;
    }
    #nav_stack div {
      flex: 1 1 auto;
      text-align: center;
      padding: 5px;
    }
    :global(main) {
      padding: 5px;
    }
    figure {
      margin: 0 !important;
    }
  }

  figure {
    margin: 0 15px;
    text-align: center;
    max-width: calc(100vw - 10px);
  }

  .img {
    display: block;
    width: 100%;
    height: 100%;
    max-height: 100vh;
    max-width: 100%;
  }
</style>

<style is:global>

  :root {
    color: 
  }

  #menu-works {
    font-weight: 600;
  }

  body {
    row-gap: 2rem;
    background-image: linear-gradient(to bottom, hsl(0, 0%, 10%), hsl(0, 0%, 5%)) !important;
    background-color: hsl(0, 0%, 5%) !important;
    background-repeat: no-repeat;
  }

  .nav_link {
    transition: color 0.5s;
  }

  a:not(.disabled):hover {
    color: rgb(236, 127, 127);
  }

  a.disabled {
    pointer-events: none;
    opacity: 0.5;
  }
  
  main {
    display: grid;
    gap: 2rem;
    padding-top: 0 !important;
    padding-bottom: 0 !important;
    padding-inline: 2rem;
    position: relative;
    min-height: 100vh;
  }

  footer {
    background-color: hsl(0, 0%, 9%) !important;
  }

  .sociallinks a {
    color: hsla(0, 63%, 26%, 0.9) !important;
  }
</style>